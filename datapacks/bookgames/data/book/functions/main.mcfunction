execute if score execute mima matches 1 run function book:execute/step

execute if score #linebreak calc matches 0 run data modify storage bookgames:mima lookup.linebreak set from block ~ -50 ~ Items[{Slot:0b}].tag.pages[0]
execute if score #linebreak calc matches 0 run data modify storage bookgames:mima lookup.ascii.10 set from storage bookgames:mima lookup.linebreak
execute if score #linebreak calc matches 0 run function book:interaction_displays
execute if score #linebreak calc matches 0 run scoreboard players set #linebreak calc 1

#interaction displays
execute as @a[limit=1] unless score @s left matches 0 run function book:setup
#interactions
execute as @e[tag=clicked,type=text_display] run function book:control/button_released
execute as @e[type=interaction] at @s on target run tag @s add clicker
execute as @e[type=interaction] at @s on target run tag @e[type=text_display,sort=nearest,limit=1] add clicked
execute as @e[tag=clicked,type=text_display] at @s run function book:control/button_pressed
tag @a[tag=clicker] remove clicker

#void kill
execute as @a at @s if entity @s[y=-12,dy=6] run tp @s 6 1.00 0 0.0 0.0

#inventory
execute as @a unless data entity @s Inventory[{Slot:17b}] run item replace entity @s inventory.8 with writable_book{display:{Name:'{"text":"New Code Book","italic":false}'},pages:[""]} 1
execute as @a unless data entity @s Inventory[{Slot:0b}] run item replace entity @s hotbar.0 with written_book{pages:['["",{"text":"Introduction","bold":true,"underlined":true},{"text":"\\nWelcome to this map!\\nHere you can learn the basics about programming in an Assembly Language using the MIMA (minimal machine) microprocessor!\\nThere are 21 coding challenges waiting for you to complete!","color":"reset"}]','["",{"text":"Chapters","bold":true,"underlined":true},{"text":"\\n","color":"reset"},{"text":"1. What is the MIMA?","clickEvent":{"action":"change_page","value":3}},{"text":"\\n"},{"text":"2. This Map","clickEvent":{"action":"change_page","value":6}},{"text":"\\n"},{"text":"3. Commands","clickEvent":{"action":"change_page","value":14}},{"text":"\\n(click on the chapter to jump there)"}]','["",{"text":"What is the MIMA?","bold":true,"underlined":true},{"text":"\\nMIMA stands for \\"","color":"reset"},{"text":"mi","bold":true},{"text":"nimal ","color":"reset"},{"text":"ma","bold":true},{"text":"chine\\" and is a teaching model (at universities) of a simple Von-Neumann microprocessor with a limited set of instructions.\\nVon-Neumann means that the executed code and the stored data share the same memory space.","color":"reset"}]','{"text":"This means that each number written to the storage can be interpreted and executed as a command and likewise each command can be read as a number too. When parsing code the commands get written to memory starting at memory address 0. "}','["",{"text":"The execution starts at address 0 too unless a \\"start:\\" label has been set. Registers: "},{"text":"IAR: ","bold":true},{"text":"address of the next instruction, ","color":"reset"},{"text":"IR: ","bold":true},{"text":"executed instruction, ","color":"reset"},{"text":"ACC","bold":true},{"text":": work/main register for computation.","color":"reset"}]','["",{"text":"This Map","bold":true,"underlined":true},{"text":"\\nIn this map you can program the MIMA by writing your code inside of a book from your inventory!\\nThere are four different menus for you available to interact with.","color":"reset"}]','["",{"text":"The Main Menu","bold":true,"underlined":true},{"text":"\\nThe main menu is located in the middle, to interact with the buttons simply right click them!\\n","color":"reset"},{"text":"Parse","bold":true},{"text":": When pressed while holding a code book the content is parsed and possibly errors get shown in chat.","color":"reset"}]','["",{"text":"Run: ","bold":true},{"text":"Executes the code that was parsed most recently.\\n","color":"reset"},{"text":"Parse and Run","bold":true},{"text":": Combines Parse and Run in one action.\\n","color":"reset"},{"text":"Stop:","bold":true},{"text":" Stops the execution.","color":"reset"}]','["",{"text":"Debug Menu","bold":true,"underlined":true},{"text":"\\n","color":"reset"},{"text":"Step Forward:","bold":true},{"text":" Executes exactly one command and shows some information about it.\\n","color":"reset"},{"text":"Commands per Step: ","bold":true},{"text":"Lets you control how many commands get executed per tick.\\n","color":"reset"},{"text":"Help: ","bold":true},{"text":"Provides additional debug help.","color":"reset"}]','["",{"text":"Area Menu","bold":true,"underlined":true},{"text":"\\nHere you can load or save the framed testing area! This is only relevant for the robot you can control. Note that saving using the buttons is only temporary and you have to interact with the structure block in the ground directly to save it permanently.","color":"reset"}]','{"text":"The first slot is just an empty area with a robot. Second is a robot infront of a cobble generator and third is a robot infront of a tree!"}','["",{"text":"Challenge Menu","bold":true,"underlined":true},{"text":"\\nThe Challenge Menu lets you complete 21 coding challenges with difficulties ","color":"reset"},{"text":"Easy,","color":"aqua"},{"text":" Medium","color":"red"},{"text":" and ","color":"reset"},{"text":"Hard","color":"dark_purple"},{"text":". The ","color":"black"},{"text":"Easy","color":"aqua"},{"text":" challenges provide a good introduction into the basics of programming the MIMA.","color":"black"}]','["",{"text":"Prev/Next: ","bold":true},{"text":"Allows you to switch between the challenges.\\n","color":"reset"},{"text":"Show Challenge: ","bold":true},{"text":"Shows what the currently challenge is.\\n","color":"reset"},{"text":"Try Challenge:","bold":true},{"text":" Tries to parse and execute the held code book to complete the challenge.\\n","color":"reset"},{"text":"Help: ","bold":true},{"text":"Additional help.","color":"reset"}]','["",{"text":"Commands","bold":true,"underlined":true},{"text":"\\n","color":"reset"},{"text":"1. MIMA Commands","clickEvent":{"action":"change_page","value":15}},{"text":"\\n"},{"text":"2. Map Exclusive Commands","clickEvent":{"action":"change_page","value":32}},{"text":"\\n"},{"text":"3. Labeling","clickEvent":{"action":"change_page","value":39}},{"text":"\\n(click on the chapter to jump there)"}]','["",{"text":"MIMA commands","bold":true,"underlined":true},{"text":"\\n","color":"reset"},{"text":"DS [INT:CONST]","bold":true},{"text":"\\nStore <CONST> at the current memory location. If not given, 0 is stored.\\nThis is the only statement allowing the full 24 bit memory word to be set.","color":"reset"}]','["",{"text":"LDC <INT:CONST>","bold":true},{"text":"\\nLoad <CONST> into the accumulator.\\nOP-Code 0x0","color":"reset"}]','["",{"text":"LDV <INT:ADDR>","bold":true},{"text":"\\nLoad the contents of memory cell <ADDR> into the accumulator.\\nOP-Code 0x1","color":"reset"}]','["",{"text":"STV <INT:ADDR>","bold":true},{"text":"\\nStore the contents of the accumulator to memory cell <ADDR>\\nOP-Code 0x2","color":"reset"}]','["",{"text":"ADD <INT:ADDR>","bold":true},{"text":"\\nAdd the contents of memory cell <ADDR> to the accumulator\\nOP-Code 0x3","color":"reset"}]','["",{"text":"AND <INT:ADDR>","bold":true},{"text":"\\nPerforms logical AND of content of cell <ADDR> and accumulator.\\nResult is stored in accumulator.\\nOP-Code 0x4","color":"reset"}]','["",{"text":"OR \\u0020<INT:ADDR>","bold":true},{"text":"\\nOR\'s the content of cell <ADDR> with the accumulator.\\nResult is stored in accumulator.\\nOP-Code 0x5","color":"reset"}]','["",{"text":"XOR <INT:ADDR>","bold":true},{"text":"\\nXOR\'s the content of cell <ADDR> with the accumulator.\\nResult is stored in Accumulator.\\nOP-Code 0x6","color":"reset"}]','["",{"text":"EQL <INT:ADDR>","bold":true},{"text":"\\nChecks for equality of the accumulator\'s contents and the content\\nof the memory cell at <ADDR>. If they are equal, the accumulator\\nis set to -1, else it is set to 0.\\nOP-Code 0x7","color":"reset"}]','["",{"text":"JMP <INT:ADDR>","bold":true},{"text":"\\nContinue execution at specified address\\nOP-Code 0x8","color":"reset"}]','["",{"text":"JMN <INT:ADDR>","bold":true},{"text":"\\nContinue execution at specified address if accumulator\'s contents \\nare negative\\nOP-Code 0x9","color":"reset"}]','["",{"text":"LDIV <INT:ADDR>","bold":true},{"text":"\\nLoad indirect (Address to load from is in cell specified by parameter) \\nOP-Code 0xA","color":"reset"}]','["",{"text":"STIV <INT:ADDR>","bold":true},{"text":"\\nStore indirect (Address to store to is in cell specified by parameter)\\nOP-Code 0xB","color":"reset"}]','["",{"text":"JMS <INT:ADDR>","bold":true},{"text":"\\nJump to subroutine. Stores the address of the next instruction at <ADDR>\\nand jumps to <ADDR+1>\\nOP-Code 0xC","color":"reset"}]','["",{"text":"JIND <INT:ADDR>","bold":true},{"text":"\\nJump indirect (Address to jump to is in cell specified by parameter)\\nOP-Code 0xD","color":"reset"}]','["",{"text":"HALT","bold":true},{"text":"\\nStop execution\\nOP-Code 0xF0","color":"reset"}]','["",{"text":"NOT","bold":true},{"text":"\\nInvert accumulator contents\\nOP-Code 0xF1","color":"reset"}]','["",{"text":"Map Exclusive Commands","bold":true,"underlined":true},{"text":"\\n","color":"reset"},{"text":"PRINT","bold":true},{"text":"\\nInterprets the contents of the ACC as an ASCII character and adds it to the print buffer. If 10 (LINE FEED) gets printed, the buffer is shown in chat and emptied. Values 32-126 are supported.","color":"reset"}]','["",{"text":"BRR","bold":true},{"text":"\\nRotates the MIMA-Bot 90 degrees to the right","color":"reset"}]','["",{"text":"BGET <INT:DIR>","bold":true},{"text":"\\nChecks if a solid block is in the given direction. Puts -1 in the ACC if there is one, 0 otherwise.\\n","color":"reset"},{"text":"Arguments","bold":true},{"text":": 0: front, 1: right, 2: back, 3: left, 4: up, 5: down","color":"reset"}]','["",{"text":"BMINE <INT:DIR>","bold":true},{"text":"\\nMines the block in the given direction.\\n","color":"reset"},{"text":"Arguments","bold":true},{"text":": 0: front, 1: right, 2: back, 3: left, 4: up, 5: down","color":"reset"}]','["",{"text":"BPLACE <INT:DIR>","bold":true},{"text":"\\nPlaces red glass in the given direction.\\n","color":"reset"},{"text":"Arguments","bold":true},{"text":": 0: front, 1: right, 2: back, 3: left, 4: up, 5: down","color":"reset"}]','["",{"text":"BMOVE <INT:DIR>","bold":true},{"text":"\\nMoves the MIMA-Bot in the given direction.\\n","color":"reset"},{"text":"Arguments","bold":true},{"text":": 0: front, 1: right, 2: back, 3: left, 4: up, 5: down","color":"reset"}]','["",{"text":"BREAK","bold":true},{"text":"\\nStops the execution, can be used for debugging. Pressing ","color":"reset"},{"text":"Run","bold":true},{"text":" continues the execution again.","color":"reset"}]','["",{"text":"Labeling","bold":true,"underlined":true},{"text":"\\nLabels can be used instead of a numeral argument in decimal or hex.\\nBy writing \\"labelname:\\" infront or above a command the memory address of that command gets stored under that name and can be used (even by commands before that).","color":"reset"}]','{"text":"This is useful for variables by using STV/LDV, for jumps using JMP or other things.\\nThe special label \\"start:\\" changes where the execution starts."}'],title:MIMAcraft,author:FloofShade,display:{Lore:["Information about everything!"]}}
#triggers
execute as @a[scores={kill_bot=1..}] run function book:kill_bot
execute as @a[scores={show_mem=0..}] run function book:debug/show_mem


scoreboard players enable @a show_mem
scoreboard players enable @a kill_bot
